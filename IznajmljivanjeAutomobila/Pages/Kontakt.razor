@page "/kontakt"
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@using IznajmljivanjeAutomobila.Data


@attribute [Authorize]
<PageTitle>Kontakt</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="hero-section text-center text-light py-5" style="background: linear-gradient(135deg, #6c757d, #343a40);">
            <img src="auti/autoinzg.jpg" alt="Logo" style="max-width: 150px; margin-bottom: 20px;">
            <h1 class="display-4 fw-bold">Kontaktirajte nas</h1>
            <p class="lead">Tu smo za sva vaša pitanja i rezervacije automobila.</p>
        </div>

        <div class="container text-center mt-5">
            <h2 class="mb-4 fw-bold">Naši kontakt podaci</h2>
            <div class="row">
                <div class="col-md-4">
                    <div class="card border-0 shadow-sm">
                        <img src="auti/phone-icon.png" class="card-img-top" alt="Telefon" />
                        <div class="card-body">
                            <h5 class="card-title fw-bold">Telefon</h5>
                            <p class="card-text text-secondary">+385 99 123 4567</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card border-0 shadow-sm">
                        <img src="auti/email-icon.png" class="card-img-top" alt="Email" />
                        <div class="card-body">
                            <h5 class="card-title fw-bold">Email</h5>
                            <p class="card-text text-secondary">info@rentacar.hr</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card border-0 shadow-sm">
                        <img src="auti/location-icon.png" class="card-img-top" alt="Adresa" />
                        <div class="card-body">
                            <h5 class="card-title fw-bold">Adresa</h5>
                            <p class="card-text text-secondary">Ulica 123, Zagreb, Hrvatska</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="container text-center mt-5">
            <h2 class="mb-4 fw-bold">Pošaljite nam upit</h2>
            <EditForm Model="noviUpit" OnValidSubmit="SpremiUpit" Context="editContext" class="mx-auto" style="max-width: 500px;">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <InputText @bind-Value="noviUpit.Ime" class="form-control" placeholder="Vaše ime" required />
                </div>
                <div class="mb-3">
                    <InputText @bind-Value="noviUpit.Email" class="form-control" placeholder="Vaš email" required />
                </div>
                <div class="mb-3">
                    <InputTextArea @bind-Value="noviUpit.Poruka" class="form-control" rows="4" placeholder="Vaša poruka" required />
                </div>

                <button type="submit" class="btn btn-dark btn-lg shadow">Pošaljite upit</button>
            </EditForm>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success mt-3">@successMessage</div>
            }
        </div>
    </Authorized>

    <NotAuthorized>
        <div class="container text-center mt-5">
            <h2>Molimo vas da se prijavite za pristup ovoj stranici.</h2>
            <p><a href="/login" class="btn btn-light btn-lg shadow">Prijavite se</a></p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private Models.Upit noviUpit = new Models.Upit();
    private string successMessage = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
    }

    private async Task SpremiUpit()
    {
        try
        {
            noviUpit.Datum = DateTime.Now;
            DbContext.Upiti.Add(noviUpit);
            await DbContext.SaveChangesAsync();

            successMessage = "Vaš upit je uspješno poslan. Hvala što ste nas kontaktirali!";
            noviUpit = new Models.Upit();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Greška pri spremanju upita: {ex.Message}");
        }
    }
}

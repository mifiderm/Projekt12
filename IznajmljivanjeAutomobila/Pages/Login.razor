@page "/login"
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@using IznajmljivanjeAutomobila.ViewModels
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Login</PageTitle>

<main class="login-main">
    <div class="login-wrapper">
        <h2 class="login-heading">Dobrodošli!</h2>
        <p class="login-subheading">Prijavite se kako biste nastavili.</p>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (isUserLoggedIn)
        {
            <p class="text-success">Već ste prijavljeni.</p>
            <button @onclick="HandleLogout" class="btn btn-danger btn-block mt-4">Odjava</button>
        }
        else
        {
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin" class="login-form">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Email" required />

                </div>
                <div class="form-group">
                    <InputText @bind-Value="loginModel.Password" class="form-control" Type="password" placeholder="Lozinka" required />
                </div>

                <button type="submit" class="btn btn-primary btn-block mt-4">Prijava</button>
            </EditForm>
        }
    </div>
</main>
<style>
    body {
        font-family: 'Arial', sans-serif;
        background-size: cover;
        margin: 0;
        color: #333;
        backdrop-filter: blur(5px);
        background-color: rgba(255, 255, 255, 0.5);
    }

    .login-main {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
        backdrop-filter: blur(px); /* Zamagljivanje */
    }

    .login-wrapper {
        background: rgba(255, 255, 255, 0.8); /* Lagana prozirna bela */
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
        max-width: 400px;
        width: 100%;
        text-align: center;
    }

    .login-heading {
        font-size: 24px;
        font-weight: bold;
        color: #1e3d58;
        margin-bottom: 10px;
    }

    .login-subheading {
        font-size: 16px;
        color: #555;
        margin-bottom: 20px;
    }

    .login-form .form-group {
        margin-bottom: 20px;
        text-align: left;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 5px;
        transition: border-color 0.3s;
    }

        .form-control:focus {
            border-color: #1e3d58;
            outline: none;
            box-shadow: 0 0 5px rgba(30, 61, 88, 0.3);
        }

    .btn-primary {
        background-color: #1e3d58;
        border: none;
        color: white;
        font-size: 16px;
        padding: 10px 20px;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        cursor: pointer;
        width: 100%;
    }

        .btn-primary:hover {
            background-color: #155a7e;
        }

    .alert-danger {
        color: #fff;
        background-color: #e74c3c;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 20px;
    }
</style>
@code {
    private LoginModel loginModel = new();
    private string? errorMessage;
    private bool isUserLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isUserLoggedIn = authState.User.Identity?.IsAuthenticated ?? false;
    }

    private async Task HandleLogin()
    {
        var authProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        bool isAuthenticated = await authProvider.LoginUserAsync(loginModel.Email, loginModel.Password);

        if (isAuthenticated)
        {
            // Ovdje uklanjamo 'forceLoad: true' kako bismo izbjegli ponovno učitavanje
            Navigation.NavigateTo("/", true); // true osigurava da će stranica biti preusmjerena
        }
        else
        {
            errorMessage = "Pogrešno korisničko ime ili lozinka.";
        }
    }

    private async Task HandleLogout()
    {
        var authProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        await authProvider.LogoutUserAsync();
        isUserLoggedIn = false;

        // Ovdje također koristi NavigateTo bez forceLoad
        Navigation.NavigateTo("/login", true);
    }

}

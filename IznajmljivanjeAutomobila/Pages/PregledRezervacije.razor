@page "/view-reservations"
@using Microsoft.EntityFrameworkCore
@inject IServiceScopeFactory ServiceScopeFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@using IznajmljivanjeAutomobila.Data
@using IznajmljivanjeAutomobila.Models
@using IznajmljivanjeAutomobila.Services
@attribute [Authorize]

<h3 class="text-center mb-4">Pregled svih rezervacija</h3>

@if (reservations == null)
{
    <div class="alert alert-info" role="alert">
        Nema rezervacija u bazi podataka.
    </div>
}
else if (reservations.Count == 0)
{
    <div class="alert alert-warning" role="alert">
        Trenutno nema rezervacija.
    </div>
}
else
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th scope="col">Ime korisnika</th>
                <th scope="col">Tip vozila</th>
                <th scope="col">Lokacija preuzimanja</th>
                <th scope="col">Lokacija vraćanja</th>
                <th scope="col">Datum preuzimanja</th>
                <th scope="col">Datum vraćanja</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reservation in reservations)
            {
                <tr>
                    <td>@reservation.CustomerName</td>
                    <td>@reservation.VehicleType</td>
                    <td>@reservation.PickupLocation</td>
                    <td>@reservation.ReturnLocation</td>
                    <td>@reservation.PickupDate.ToString("dd.MM.yyyy")</td>
                    <td>@reservation.ReturnDate.ToString("dd.MM.yyyy")</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination Controls -->
    <div class="d-flex justify-content-center">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Prethodna</button>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!HasNextPage)">Sljedeća</button>
    </div>
}

@code {
    private List<VehicleReservation> reservations;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalReservations;
    private bool isLoading = false;

    private bool HasPreviousPage => currentPage > 1;
    private bool HasNextPage => currentPage * pageSize < totalReservations;

    protected override async Task OnInitializedAsync()
    {
        await LoadReservations();
    }

    private async Task LoadReservations()
    {
        if (isLoading) return;

        isLoading = true;

        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var DbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

                totalReservations = await DbContext.VehicleReservations.CountAsync();

                reservations = await DbContext.VehicleReservations
                    .Skip((currentPage - 1) * pageSize)
                    .Take(pageSize)
                    .ToListAsync();
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            currentPage--;
            await LoadReservations();
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            currentPage++;
            await LoadReservations();
        }
    }
}
